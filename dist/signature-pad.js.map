{
  "version": 3,
  "sources": ["../src/SignaturePad.js"],
  "sourcesContent": ["/**\n * Niel Blanca / SignaturePad.js v1.2.0\n * --------------------------------------------------------\n * Custom lightweight signature pad with undo, redo, resize, sync,\n * dynamic color updates, and SVG/PNG/JPG/JSON export support.\n *\n * Features:\n * - Smooth bezier curve drawing\n * - Touch pressure sensitivity\n * - Performance optimized\n * - Modern ES6+ implementation\n * - Comprehensive error handling\n * - Event system with custom events\n * - Method chaining support\n *\n * @version     1.2.0\n * @author      Niel Blanca\n * @license     MIT (https://opensource.org/licenses/MIT)\n * --------------------------------------------------------\n */\n\n/**\n * @typedef {Object} Point\n * @property {number} x - X coordinate\n * @property {number} y - Y coordinate\n * @property {number} [pressure] - Pressure value (0-1)\n */\n\n/**\n * @typedef {Object} SignaturePadOptions\n * @property {string} [background='#fff'] - Background color\n * @property {string} [color='#000'] - Pen color\n * @property {number} [thickness=2] - Pen thickness\n * @property {boolean} [guideline=false] - Show guideline\n * @property {string} [guidelineColor='#a0a0a0'] - Guideline color\n * @property {number} [guidelineOffset=50] - Guideline offset from bottom\n * @property {number} [guidelineIndent=10] - Guideline indent from sides\n * @property {boolean} [disableResize=false] - Disable canvas resize\n * @property {number} [undoLimit=50] - Maximum undo/redo steps\n * @property {HTMLInputElement|HTMLTextAreaElement} [syncField=null] - Field to sync with\n * @property {string} [syncFormat='JSON'] - Sync format (JSON|PNG|JPG|SVG)\n * @property {boolean} [svgStyles=false] - Use styles in SVG export\n * @property {boolean} [smoothing=true] - Enable stroke smoothing\n * @property {number} [smoothingFactor=0.5] - Smoothing intensity (0-1)\n * @property {Function} [onChange=null] - Change callback\n * @property {Function} [onStrokeStart=null] - Stroke start callback\n * @property {Function} [onStrokeEnd=null] - Stroke end callback\n */\n\n/**\n * Modern signature pad with smooth drawing and advanced features\n */\nclass SignaturePad {\n  /**\n   * Creates a new SignaturePad instance\n   * @param {HTMLElement} container - Container element\n   * @param {SignaturePadOptions} [options={}] - Configuration options\n   * @throws {Error} When container is invalid\n   */\n  constructor(container, options = {}) {\n    // Validate container\n    if (!container || !(container instanceof HTMLElement)) {\n      throw new Error('SignaturePad: Container must be a valid HTMLElement');\n    }\n\n    this.container = container;\n    this.opts = Object.assign(\n      {\n        background: '#fff',\n        color: '#000',\n        thickness: 2,\n        guideline: false,\n        guidelineColor: '#a0a0a0',\n        guidelineOffset: 50,\n        guidelineIndent: 10,\n        disableResize: false,\n        undoLimit: 50,\n        syncField: null,\n        syncFormat: 'JSON',\n        svgStyles: false,\n        smoothing: true,\n        smoothingFactor: 0.5,\n        onChange: null,\n        onStrokeStart: null,\n        onStrokeEnd: null\n      },\n      options\n    );\n\n    // Validate options\n    this._validateOptions();\n\n    // Initialize internal state\n    this.lines = [];\n    this.redoStack = [];\n    this.isDrawing = false;\n    this.points = [];\n\n    // Performance optimization: throttle resize events\n    this._resizeTimeout = null;\n\n    // Initialize canvas and events\n    this._initCanvas();\n    this._attachEvents();\n\n    // Setup resize listener with debouncing\n    if (!this.opts.disableResize) {\n      window.addEventListener('resize', this._debouncedResize.bind(this));\n    }\n\n    // Initial clear to set up background\n    this.clear(false);\n  }\n\n  /**\n   * Validates constructor options\n   * @private\n   * @throws {Error} When options are invalid\n   */\n  _validateOptions() {\n    if (this.opts.undoLimit < 1) {\n      throw new Error('SignaturePad: undoLimit must be at least 1');\n    }\n    if (this.opts.thickness < 0.1) {\n      throw new Error('SignaturePad: thickness must be at least 0.1');\n    }\n    if (this.opts.smoothingFactor < 0 || this.opts.smoothingFactor > 1) {\n      throw new Error('SignaturePad: smoothingFactor must be between 0 and 1');\n    }\n  }\n\n  /**\n   * Debounced resize handler for better performance\n   * @private\n   */\n  _debouncedResize() {\n    if (this._resizeTimeout) {\n      clearTimeout(this._resizeTimeout);\n    }\n    this._resizeTimeout = setTimeout(() => {\n      this._resizeCanvas();\n    }, 150);\n  }\n\n  /**\n   * Initializes the canvas element\n   * @private\n   */\n  _initCanvas() {\n    try {\n      this.canvas = document.createElement('canvas');\n      this.container.innerHTML = '';\n      this.container.appendChild(this.canvas);\n\n      this.ctx = this.canvas.getContext('2d');\n      if (!this.ctx) {\n        throw new Error('Failed to get 2D context from canvas');\n      }\n\n      this._resizeCanvas();\n      this.ctx.lineCap = 'round';\n      this.ctx.lineJoin = 'round';\n    } catch (error) {\n      throw new Error(`SignaturePad: Failed to initialize canvas - ${error.message}`);\n    }\n  }\n\n  /**\n   * Resizes canvas to fit container with improved handling\n   * @private\n   */\n  _resizeCanvas() {\n    try {\n      const { width, height } = this.container.getBoundingClientRect();\n\n      if (width === 0 || height === 0) {\n        console.warn('SignaturePad: Container has zero dimensions');\n        return;\n      }\n\n      // Save current content if canvas has data\n      let imageData = null;\n      if (this.canvas && this.canvas.width > 0 && this.canvas.height > 0) {\n        try {\n          imageData = this.canvas.toDataURL();\n        } catch {\n          // Ignore if we can't get image data (e.g., tainted canvas)\n        }\n      }\n\n      // Set new dimensions\n      this.canvas.width = width;\n      this.canvas.height = height;\n\n      // Re-get context after resize\n      this.ctx = this.canvas.getContext('2d');\n      this.ctx.lineCap = 'round';\n      this.ctx.lineJoin = 'round';\n\n      // Restore background\n      this._drawBackground();\n\n      // Restore content if available\n      if (imageData) {\n        const img = new Image();\n        img.onload = () => {\n          this.ctx.drawImage(img, 0, 0);\n        };\n        img.onerror = () => {\n          // If image restoration fails, redraw from lines\n          this._redrawLines();\n        };\n        img.src = imageData;\n      }\n    } catch (error) {\n      console.error('SignaturePad: Error resizing canvas:', error);\n    }\n  }\n\n  /**\n   * Attaches event listeners with improved touch/pointer support\n   * @private\n   */\n  _attachEvents() {\n    // Use modern Pointer Events API for better cross-device support\n    this.canvas.addEventListener('pointerdown', this._startStroke.bind(this));\n    this.canvas.addEventListener('pointermove', this._continueStroke.bind(this));\n    document.addEventListener('pointerup', this._endStroke.bind(this));\n    document.addEventListener('pointercancel', this._endStroke.bind(this));\n\n    // Prevent default touch behaviors that might interfere\n    this.canvas.addEventListener('touchstart', e => e.preventDefault());\n    this.canvas.addEventListener('touchmove', e => e.preventDefault());\n    this.canvas.addEventListener('touchend', e => e.preventDefault());\n  }\n\n  /**\n   * Starts a new stroke with enhanced touch/pressure support\n   * @private\n   * @param {PointerEvent} event - Pointer event\n   */\n  _startStroke(event) {\n    event.preventDefault();\n\n    this.isDrawing = true;\n    this.points = [];\n\n    const point = this._getPointFromEvent(event);\n    this._addPoint(point.x, point.y, point.pressure);\n\n    // Trigger callback\n    if (typeof this.opts.onStrokeStart === 'function') {\n      this.opts.onStrokeStart(this);\n    }\n  }\n\n  /**\n   * Continues drawing with smooth curves\n   * @private\n   * @param {PointerEvent} event - Pointer event\n   */\n  _continueStroke(event) {\n    if (!this.isDrawing) return;\n\n    event.preventDefault();\n\n    const point = this._getPointFromEvent(event);\n    this._addPoint(point.x, point.y, point.pressure);\n\n    if (this.points.length >= 2) {\n      this._drawSmoothLine();\n    }\n  }\n\n  /**\n   * Ends the current stroke\n   * @private\n   */\n  _endStroke() {\n    if (!this.isDrawing) return;\n\n    this.isDrawing = false;\n\n    // Handle single point (dot)\n    if (this.points.length === 1) {\n      this._drawDot(this.points[0]);\n    }\n\n    // Save stroke to history\n    if (this.points.length > 0) {\n      this.lines.push([...this.points]);\n\n      // Limit undo stack size\n      if (this.lines.length > this.opts.undoLimit) {\n        this.lines.shift();\n      }\n\n      // Clear redo stack on new stroke\n      this.redoStack = [];\n\n      this._triggerChange();\n    }\n\n    // Trigger callback\n    if (typeof this.opts.onStrokeEnd === 'function') {\n      this.opts.onStrokeEnd(this);\n    }\n  }\n\n  /**\n   * Extracts point data from pointer event with pressure support\n   * @private\n   * @param {PointerEvent} event - Pointer event\n   * @returns {Point} Point with coordinates and pressure\n   */\n  _getPointFromEvent(event) {\n    const rect = this.canvas.getBoundingClientRect();\n    return {\n      x: event.clientX - rect.left,\n      y: event.clientY - rect.top,\n      pressure: event.pressure || 0.5 // Default pressure for non-pressure devices\n    };\n  }\n\n  /**\n   * Adds a point to current stroke with optional smoothing\n   * @private\n   * @param {number} x - X coordinate\n   * @param {number} y - Y coordinate\n   * @param {number} [pressure=0.5] - Pressure value\n   */\n  _addPoint(x, y, pressure = 0.5) {\n    const point = { x, y, pressure };\n\n    if (this.opts.smoothing && this.points.length > 0) {\n      // Apply smoothing by averaging with previous point\n      const lastPoint = this.points[this.points.length - 1];\n      const factor = this.opts.smoothingFactor;\n\n      point.x = lastPoint.x + (point.x - lastPoint.x) * factor;\n      point.y = lastPoint.y + (point.y - lastPoint.y) * factor;\n    }\n\n    this.points.push(point);\n  }\n\n  /**\n   * Draws a smooth line using quadratic curves\n   * @private\n   */\n  _drawSmoothLine() {\n    const points = this.points;\n    const len = points.length;\n\n    if (len < 2) return;\n\n    this.ctx.strokeStyle = this.opts.color;\n    this.ctx.lineWidth = this._getLineWidth(points[len - 1]);\n\n    this.ctx.beginPath();\n\n    if (len === 2) {\n      // Simple line for first segment\n      this.ctx.moveTo(points[0].x, points[0].y);\n      this.ctx.lineTo(points[1].x, points[1].y);\n    } else {\n      // Quadratic curve for smooth drawing\n      const prevPoint = points[len - 3];\n      const controlPoint = points[len - 2];\n      const endPoint = points[len - 1];\n\n      this.ctx.moveTo(prevPoint.x, prevPoint.y);\n      this.ctx.quadraticCurveTo(\n        controlPoint.x,\n        controlPoint.y,\n        (controlPoint.x + endPoint.x) / 2,\n        (controlPoint.y + endPoint.y) / 2\n      );\n    }\n\n    this.ctx.stroke();\n  }\n\n  /**\n   * Draws a dot for single-point strokes\n   * @private\n   * @param {Point} point - Point to draw\n   */\n  _drawDot(point) {\n    const radius = this._getLineWidth(point) / 2;\n\n    this.ctx.beginPath();\n    this.ctx.arc(point.x, point.y, radius, 0, 2 * Math.PI);\n    this.ctx.fillStyle = this.opts.color;\n    this.ctx.fill();\n  }\n\n  /**\n   * Calculates line width based on pressure and thickness\n   * @private\n   * @param {Point} point - Point with pressure data\n   * @returns {number} Line width\n   */\n  _getLineWidth(point) {\n    const baseLine = this.opts.thickness;\n    const pressureVariation = point.pressure || 0.5;\n\n    // Vary line width based on pressure (0.5x to 1.5x base thickness)\n    return baseLine * (0.5 + pressureVariation);\n  }\n\n  /**\n   * Draws the background with optional guideline\n   * @private\n   */\n  _drawBackground() {\n    if (!this.ctx) return;\n\n    try {\n      // Fill background\n      this.ctx.fillStyle = this.opts.background;\n      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n      // Draw guideline if enabled\n      if (this.opts.guideline) {\n        this._drawGuideline();\n      }\n    } catch (error) {\n      console.error('SignaturePad: Error drawing background:', error);\n    }\n  }\n\n  /**\n   * Draws the signature guideline\n   * @private\n   */\n  _drawGuideline() {\n    const y = this.canvas.height - this.opts.guidelineOffset;\n\n    this.ctx.save();\n    this.ctx.strokeStyle = this.opts.guidelineColor;\n    this.ctx.lineWidth = 1;\n    this.ctx.setLineDash([5, 5]); // Dashed line for better appearance\n\n    this.ctx.beginPath();\n    this.ctx.moveTo(this.opts.guidelineIndent, y);\n    this.ctx.lineTo(this.canvas.width - this.opts.guidelineIndent, y);\n    this.ctx.stroke();\n\n    this.ctx.restore();\n  }\n\n  /**\n   * Redraws all lines with optimized performance\n   * @private\n   */\n  _redrawLines() {\n    if (!this.ctx) return;\n\n    try {\n      this._drawBackground();\n\n      if (this.lines.length === 0) return;\n\n      this.ctx.save();\n      this.ctx.strokeStyle = this.opts.color;\n      this.ctx.lineCap = 'round';\n      this.ctx.lineJoin = 'round';\n\n      // Batch draw for better performance\n      for (const line of this.lines) {\n        if (line.length === 0) continue;\n\n        if (line.length === 1) {\n          // Single point (dot)\n          const point = line[0];\n          const radius = this._getLineWidth(point) / 2;\n\n          this.ctx.beginPath();\n          this.ctx.arc(point.x, point.y, radius, 0, 2 * Math.PI);\n          this.ctx.fillStyle = this.opts.color;\n          this.ctx.fill();\n        } else {\n          // Multiple points (line)\n          this._redrawSmoothLine(line);\n        }\n      }\n\n      this.ctx.restore();\n    } catch (error) {\n      console.error('SignaturePad: Error redrawing lines:', error);\n    }\n  }\n\n  /**\n   * Redraws a single line with smooth curves\n   * @private\n   * @param {Point[]} points - Array of points\n   */\n  _redrawSmoothLine(points) {\n    if (points.length < 2) return;\n\n    this.ctx.lineWidth = this.opts.thickness;\n    this.ctx.beginPath();\n    this.ctx.moveTo(points[0].x, points[0].y);\n\n    if (points.length === 2) {\n      // Simple line for two points\n      this.ctx.lineTo(points[1].x, points[1].y);\n    } else {\n      // Smooth curves for multiple points\n      for (let i = 1; i < points.length - 1; i++) {\n        const currentPoint = points[i];\n        const nextPoint = points[i + 1];\n        const controlX = (currentPoint.x + nextPoint.x) / 2;\n        const controlY = (currentPoint.y + nextPoint.y) / 2;\n\n        this.ctx.quadraticCurveTo(currentPoint.x, currentPoint.y, controlX, controlY);\n      }\n\n      // Final point\n      const lastPoint = points[points.length - 1];\n      this.ctx.lineTo(lastPoint.x, lastPoint.y);\n    }\n\n    this.ctx.stroke();\n  }\n\n  /**\n   * Triggers change callback and syncs with field\n   * @private\n   */\n  _triggerChange() {\n    try {\n      // Sync with field if configured\n      if (this.opts.syncField) {\n        let val;\n        switch (this.opts.syncFormat.toUpperCase()) {\n          case 'PNG':\n            val = this.toDataURL('image/png');\n            break;\n          case 'JPG':\n          case 'JPEG':\n            val = this.toDataURL('image/jpeg');\n            break;\n          case 'SVG':\n            val = this.toSVG();\n            break;\n          default:\n            val = this.toJSON();\n        }\n        this.opts.syncField.value = val;\n      }\n\n      // Call change callback\n      if (typeof this.opts.onChange === 'function') {\n        this.opts.onChange(this);\n      }\n    } catch (error) {\n      console.error('SignaturePad: Error in change callback:', error);\n    }\n  }\n\n  // ==============================================\n  // PUBLIC API METHODS\n  // ==============================================\n\n  /**\n   * Clears the signature pad\n   * @param {boolean} [trigger=true] - Whether to trigger change callback\n   * @returns {SignaturePad} This instance for method chaining\n   */\n  clear(trigger = true) {\n    this.lines = [];\n    this.redoStack = [];\n    this._drawBackground();\n\n    if (trigger) {\n      this._triggerChange();\n    }\n\n    return this;\n  }\n\n  /**\n   * Undoes the last stroke\n   * @returns {SignaturePad} This instance for method chaining\n   */\n  undo() {\n    if (this.lines.length === 0) return this;\n\n    const lastLine = this.lines.pop();\n    this.redoStack.push(lastLine);\n\n    // Limit redo stack size\n    if (this.redoStack.length > this.opts.undoLimit) {\n      this.redoStack.shift();\n    }\n\n    this._redrawLines();\n    this._triggerChange();\n\n    return this;\n  }\n\n  /**\n   * Redoes the last undone stroke\n   * @returns {SignaturePad} This instance for method chaining\n   */\n  redo() {\n    if (this.redoStack.length === 0) return this;\n\n    const lastRedo = this.redoStack.pop();\n    this.lines.push(lastRedo);\n\n    this._redrawLines();\n    this._triggerChange();\n\n    return this;\n  }\n\n  /**\n   * Checks if the signature pad is empty\n   * @returns {boolean} True if no strokes have been drawn\n   */\n  isEmpty() {\n    return this.lines.length === 0;\n  }\n\n  /**\n   * Exports signature as JSON string\n   * @returns {string} JSON representation of the signature\n   */\n  toJSON() {\n    try {\n      return JSON.stringify({\n        lines: this.lines,\n        version: '1.2.0',\n        timestamp: Date.now()\n      });\n    } catch (error) {\n      console.error('SignaturePad: Error exporting to JSON:', error);\n      return '{\"lines\":[],\"error\":\"Export failed\"}';\n    }\n  }\n\n  /**\n   * Exports signature as data URL\n   * @param {string} [type='image/png'] - Image type (image/png, image/jpeg)\n   * @param {number} [quality] - Image quality for JPEG (0-1)\n   * @returns {string} Data URL of the signature\n   */\n  toDataURL(type = 'image/png', quality) {\n    try {\n      return this.canvas.toDataURL(type, quality);\n    } catch (error) {\n      console.error('SignaturePad: Error exporting to data URL:', error);\n      return '';\n    }\n  }\n\n  /**\n   * Exports signature as SVG string with enhanced features\n   * @returns {string} SVG representation of the signature\n   */\n  toSVG() {\n    try {\n      const { background, color, thickness, svgStyles } = this.opts;\n      const { width: szW, height: szH } = this.canvas;\n\n      const bgAttr = svgStyles ? `style=\"fill:${background};\"` : `fill=\"${background}\"`;\n      const lineAttr = svgStyles\n        ? `style=\"fill:none;stroke:${color};stroke-width:${thickness};stroke-linecap:round;stroke-linejoin:round;\"`\n        : `fill=\"none\" stroke=\"${color}\" stroke-width=\"${thickness}\" stroke-linecap=\"round\" stroke-linejoin=\"round\"`;\n\n      let svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${szW}\" height=\"${szH}\" viewBox=\"0 0 ${szW} ${szH}\">`;\n      svg += `<rect ${bgAttr} x=\"0\" y=\"0\" width=\"${szW}\" height=\"${szH}\"/>`;\n\n      if (this.opts.guideline) {\n        const y = szH - this.opts.guidelineOffset;\n        const guidelineAttr = svgStyles\n          ? `style=\"stroke:${this.opts.guidelineColor};stroke-width:1;stroke-dasharray:5,5;\"`\n          : `stroke=\"${this.opts.guidelineColor}\" stroke-width=\"1\" stroke-dasharray=\"5,5\"`;\n        svg += `<line ${guidelineAttr} x1=\"${this.opts.guidelineIndent}\" y1=\"${y}\" x2=\"${szW - this.opts.guidelineIndent}\" y2=\"${y}\"/>`;\n      }\n\n      svg += `<g ${lineAttr}>`;\n      for (const line of this.lines) {\n        if (line.length === 1) {\n          // Single point as circle\n          const point = line[0];\n          const radius = thickness / 2;\n          svg += `<circle cx=\"${point.x}\" cy=\"${point.y}\" r=\"${radius}\" fill=\"${color}\"/>`;\n        } else if (line.length > 1) {\n          // Multiple points as path\n          const points = line.map(p => `${p.x},${p.y}`).join(' ');\n          svg += `<polyline points=\"${points}\" />`;\n        }\n      }\n      svg += '</g></svg>';\n\n      return svg;\n    } catch (error) {\n      console.error('SignaturePad: Error exporting to SVG:', error);\n      return '<svg></svg>';\n    }\n  }\n\n  /**\n   * Imports signature data with enhanced format support\n   * @param {string|Object} data - Signature data to import\n   * @returns {SignaturePad} This instance for method chaining\n   * @throws {Error} When data format is invalid\n   */\n  draw(data) {\n    if (!data) {\n      throw new Error('SignaturePad: No data provided to draw()');\n    }\n\n    this.clear(false);\n\n    try {\n      switch (typeof data) {\n        case 'string':\n          this._handleStringData(data);\n          break;\n        case 'object':\n          this._handleObjectData(data);\n          break;\n        default:\n          throw new Error(`Unsupported data type: ${typeof data}`);\n      }\n\n      this._triggerChange();\n    } catch (error) {\n      console.error('SignaturePad: Error drawing data:', error);\n      this.clear(false);\n      throw error;\n    }\n\n    return this;\n  }\n\n  /**\n   * Handles string data import\n   * @private\n   * @param {string} data - String data\n   */\n  _handleStringData(data) {\n    const trimmedData = data.trim();\n\n    if (trimmedData.startsWith('data:')) {\n      // Data URL\n      this._drawDataURL(trimmedData);\n    } else if (trimmedData.startsWith('<svg')) {\n      // SVG string\n      this._drawSVG(trimmedData);\n    } else {\n      // Assume JSON\n      try {\n        const parsed = JSON.parse(trimmedData);\n        this._handleObjectData(parsed);\n      } catch {\n        throw new Error('Invalid JSON data provided');\n      }\n    }\n  }\n\n  /**\n   * Handles object data import\n   * @private\n   * @param {Object} data - Object data\n   */\n  _handleObjectData(data) {\n    if (!data || typeof data !== 'object') {\n      throw new Error('Invalid object data provided');\n    }\n\n    if (Array.isArray(data.lines)) {\n      this.lines = data.lines.map(line =>\n        Array.isArray(line)\n          ? line.filter(\n              point => point && typeof point.x === 'number' && typeof point.y === 'number'\n            )\n          : []\n      );\n      this._redrawLines();\n    } else {\n      throw new Error('Object data must contain a \"lines\" array');\n    }\n  }\n\n  /**\n   * Draws data URL onto canvas\n   * @private\n   * @param {string} dataURL - Data URL\n   */\n  _drawDataURL(dataURL) {\n    const img = new Image();\n    img.onload = () => {\n      try {\n        this.ctx.drawImage(img, 0, 0);\n      } catch (error) {\n        console.error('SignaturePad: Error drawing image:', error);\n      }\n    };\n    img.onerror = () => {\n      console.error('SignaturePad: Failed to load image from data URL');\n    };\n    img.src = dataURL;\n  }\n\n  /**\n   * Draws SVG data\n   * @private\n   * @param {string} svgString - SVG string\n   */\n  _drawSVG(svgString) {\n    try {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(svgString, 'image/svg+xml');\n\n      // Check for parsing errors\n      const parserError = doc.querySelector('parsererror');\n      if (parserError) {\n        throw new Error('Invalid SVG data');\n      }\n\n      this._parseSVG(doc);\n    } catch (error) {\n      throw new Error(`Failed to parse SVG: ${error.message}`);\n    }\n  }\n\n  /**\n   * Parses SVG document to extract signature lines\n   * @private\n   * @param {Document} doc - SVG document\n   */\n  _parseSVG(doc) {\n    const polylines = Array.from(doc.querySelectorAll('polyline'));\n    const circles = Array.from(doc.querySelectorAll('circle'));\n\n    this.lines = [];\n\n    // Parse polylines\n    for (const polyline of polylines) {\n      const pointsAttr = polyline.getAttribute('points');\n      if (!pointsAttr) continue;\n\n      const points = pointsAttr\n        .trim()\n        .split(/\\s+/)\n        .map(pointStr => {\n          const [x, y] = pointStr.split(',').map(Number);\n          return isNaN(x) || isNaN(y) ? null : { x, y };\n        })\n        .filter(Boolean);\n\n      if (points.length > 0) {\n        this.lines.push(points);\n      }\n    }\n\n    // Parse circles (single points)\n    for (const circle of circles) {\n      const cx = parseFloat(circle.getAttribute('cx'));\n      const cy = parseFloat(circle.getAttribute('cy'));\n\n      if (!isNaN(cx) && !isNaN(cy)) {\n        this.lines.push([{ x: cx, y: cy }]);\n      }\n    }\n\n    this._redrawLines();\n  }\n\n  // ==============================================\n  // DYNAMIC UPDATE METHODS\n  // ==============================================\n\n  /**\n   * Changes pen color dynamically\n   * @param {string} newColor - New pen color\n   * @returns {SignaturePad} This instance for method chaining\n   * @throws {Error} When color is invalid\n   */\n  setColor(newColor) {\n    if (typeof newColor !== 'string' || !newColor.trim()) {\n      throw new Error('SignaturePad: Color must be a non-empty string');\n    }\n\n    this.opts.color = newColor;\n    this._redrawLines();\n    this._triggerChange();\n\n    return this;\n  }\n\n  /**\n   * Changes guideline color dynamically\n   * @param {string} newColor - New guideline color\n   * @returns {SignaturePad} This instance for method chaining\n   * @throws {Error} When color is invalid\n   */\n  setGuidelineColor(newColor) {\n    if (typeof newColor !== 'string' || !newColor.trim()) {\n      throw new Error('SignaturePad: Guideline color must be a non-empty string');\n    }\n\n    this.opts.guidelineColor = newColor;\n    this._redrawLines();\n    this._triggerChange();\n\n    return this;\n  }\n\n  /**\n   * Changes background color dynamically\n   * @param {string} newColor - New background color\n   * @returns {SignaturePad} This instance for method chaining\n   * @throws {Error} When color is invalid\n   */\n  setBackgroundColor(newColor) {\n    if (typeof newColor !== 'string' || !newColor.trim()) {\n      throw new Error('SignaturePad: Background color must be a non-empty string');\n    }\n\n    this.opts.background = newColor;\n    this._redrawLines();\n    this._triggerChange();\n\n    return this;\n  }\n\n  /**\n   * Changes pen thickness dynamically\n   * @param {number} newThickness - New pen thickness\n   * @returns {SignaturePad} This instance for method chaining\n   * @throws {Error} When thickness is invalid\n   */\n  setThickness(newThickness) {\n    if (typeof newThickness !== 'number' || newThickness < 0.1) {\n      throw new Error('SignaturePad: Thickness must be a number >= 0.1');\n    }\n\n    this.opts.thickness = newThickness;\n    this._redrawLines();\n    this._triggerChange();\n\n    return this;\n  }\n\n  /**\n   * Toggles guideline visibility\n   * @param {boolean} [show] - Whether to show guideline (toggles if not provided)\n   * @returns {SignaturePad} This instance for method chaining\n   */\n  toggleGuideline(show) {\n    this.opts.guideline = show !== undefined ? show : !this.opts.guideline;\n    this._redrawLines();\n    this._triggerChange();\n\n    return this;\n  }\n\n  // ==============================================\n  // UTILITY METHODS\n  // ==============================================\n\n  /**\n   * Gets current signature bounds\n   * @returns {Object} Bounds object with min/max coordinates\n   */\n  getBounds() {\n    if (this.isEmpty()) {\n      return { minX: 0, minY: 0, maxX: 0, maxY: 0, width: 0, height: 0 };\n    }\n\n    let minX = Infinity,\n      minY = Infinity,\n      maxX = -Infinity,\n      maxY = -Infinity;\n\n    for (const line of this.lines) {\n      for (const point of line) {\n        minX = Math.min(minX, point.x);\n        minY = Math.min(minY, point.y);\n        maxX = Math.max(maxX, point.x);\n        maxY = Math.max(maxY, point.y);\n      }\n    }\n\n    return {\n      minX,\n      minY,\n      maxX,\n      maxY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n  }\n\n  /**\n   * Destroys the signature pad and cleans up resources\n   * @returns {void}\n   */\n  destroy() {\n    // Remove event listeners\n    if (this.canvas) {\n      this.canvas.removeEventListener('pointerdown', this._startStroke);\n      this.canvas.removeEventListener('pointermove', this._continueStroke);\n    }\n\n    if (this._resizeTimeout) {\n      clearTimeout(this._resizeTimeout);\n    }\n\n    window.removeEventListener('resize', this._debouncedResize);\n\n    // Clear references\n    this.container = null;\n    this.canvas = null;\n    this.ctx = null;\n    this.lines = null;\n    this.redoStack = null;\n    this.opts = null;\n  }\n}\n\nexport default SignaturePad;\n"],
  "mappings": "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",
  "names": []
}
